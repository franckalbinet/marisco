# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/cli/config.ipynb.

# %% auto 0
__all__ = ['base_path', 'github_repo', 'configs', 'cdl', 'write_toml', 'download_luts', 'main']

# %% ../../nbs/cli/config.ipynb 1
from fastcore.script import *
from fastcore.foundation import Config
from fastcore.xtras import mkdir
from fastcore.style import S

from pathlib import Path
import os
import sys
import tomli
import tomli_w
from urllib import request

# %% ../../nbs/cli/config.ipynb 2
base_path = Path.home() / '.marisco'
github_repo = 'franckalbinet/marisco'

# %% ../../nbs/cli/config.ipynb 3
configs = {
    'dirs': {
        'lut': str(base_path / 'lut'), # Look-up tables
    },
    'paths': {
        'luts': {
            'dbo_nuclide.xlsx': f'https://github.com/{github_repo}/blob/main/nbs/files/lut/dbo_nuclide.xlsx?raw=true'
        }
    }
}

# %% ../../nbs/cli/config.ipynb 5
cdl = { 
    'placeholder': '_to_be_filled_in_',
    'grps': {
        'sea': {
            'name': 'seawater'
        },
        'bio': {
            'name': 'biota'
        },
        'sed': {
            'name': 'sediment'
        },
        'sus': {
            'name': 'suspended-matter'
        }
    },
    'global_attrs': {
        'description': 'Template description',
        'summary': 'Template summary',
        'keyword': 'MARIS other-key-words',
        'license': 'Common ...'
        },
    'default_vars': {
        'sample': {
            'name': 'sample',
            'long_name': 'Sample ID of measurement'
        },
        'depth': {
            'name': 'depth',
            'long_name': 'Depth below seal level',
            'standard_name': 'depth_below_sea_floor',
            'units': 'm',
            'axis': 'Z'},
        'lon': {
            'name': 'lon',
            'long_name': 'Measurement longitude',
            'standard_name': 'longitude',
            'units': 'degrees_north',
            'axis': 'Y',
            '_CoordinateAxisType': 'Lon'
        },
        'lat': {
            'name': 'lat',
            'long_name': 'Measurement latitude',
            'standard_name': 'latitude',
            'units': 'degrees_east',
            'axis': 'X',
            '_CoordinateAxisType': 'Lat'
        },
        'time': {
            'name': 'time',
            'long_name': 'Time of measurement',
            'standard_name': 'time',
            'units': 'seconds since 1970-01-01 00:00:00.0',
            'time_origin': '1970-01-01 00:00:00',
            'time_zone': 'UTC',
            'abbreviation': 'Date/Time',
            'axis': 'T',
            'calendar': 'gregorian'
        },
        'uncertainty': {
            'name': 'uncertainty',
            'long_name': ' uncertainty',
            'standard_name': '_uncertainty',
            'var_suffix': '_unc'
        },
        'detection_limit': {
            'name': 'detection_limit',
            'long_name': ' detection limit',
            'standard_name': '_detection_limit',
            'var_suffix': '_dl'
        }
    }
}

# %% ../../nbs/cli/config.ipynb 6
def write_toml(fname, cfg):
    print(f'Creating {fname}')
    with open(fname, "wb") as f:
        tomli_w.dump(cfg, f)

# %% ../../nbs/cli/config.ipynb 7
def download_luts(luts):
    print('Downloading lookup tables ...')
    for fname, url in luts.items():
        print(f'  {url}')
        request.urlretrieve(url, base_path / f'lut/{fname}')

# %% ../../nbs/cli/config.ipynb 8
def main():
    "Create configuration files (`configs.toml` and `cdl.toml`) & download lookup tables"
    if base_path.exists():
        msg = S.red('Configuration files already exist. Do you want to overwrite them? (y/[n]): ')
        if not input(msg).lower().startswith('y'): 
            sys.exit(1)

    mkdir(base_path, overwrite=True)
    for k, v in configs['dirs'].items():
        mkdir(v, parents=True, overwrite=True)
            
    write_toml(base_path / "configs.toml", configs)
    write_toml(base_path / "cdl.toml", cdl) 
    download_luts(configs['paths']['luts'])

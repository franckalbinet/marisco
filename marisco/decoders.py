"""Various utilities to decode MARIS dataset from `NetCDF`."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/decoders.ipynb.

# %% auto 0
__all__ = ['NetCDFDecoder']

# %% ../nbs/api/decoders.ipynb 3
from pathlib import Path
from netCDF4 import Dataset
import pandas as pd
import numpy as np
from fastcore.basics import patch, store_attr
import fastcore.all as fc
from typing import Dict, Callable

from marisco.configs import (
    NC_DTYPES, 
    NC_VARS, 
    OR_VARS,
    NC_DIM,
    NC_GROUPS,
    SMP_TYPE_LUT,
    lut_path, 
    Enums,
    nc_tpl_path,
    get_time_units
)

from marisco.callbacks import (
    DecodeTimeCB
    )

# %% ../nbs/api/decoders.ipynb 6
class NetCDFDecoder:
    """Decode MARIS NetCDF files to human readable formats."""
    def __init__(self, 
                 dfs: Dict[str, pd.DataFrame], 
                 fname_in: str,  # Path to NetCDF file
                 dest_out: str, 
                 output_format:str, 
                 remap_vars: Dict[str, str],
                 verbose: bool=False
                ):
        fc.store_attr()        

# %% ../nbs/api/decoders.ipynb 7
@patch
def process_groups(self: NetCDFDecoder):
    """Process all groups in the dataset."""
    for group_name, df in self.dfs.items():
        self.process_group(group_name, df, self.remap_vars)

# %% ../nbs/api/decoders.ipynb 8
@patch
def process_group(self: NetCDFDecoder, group_name: str, df: pd.DataFrame, remap_vars: Dict[str, str]):
    """Process a single group, mapping column names using remap_vars."""
    # Map column names using remap_vars
    df.columns = [remap_vars.get(col, col) for col in df.columns]


# %% ../nbs/api/decoders.ipynb 9
@patch
def save_dataframes(self: NetCDFDecoder):
    """
    Save DataFrames to files in the specified format.
    
    Parameters:
        dest_path (str, optional): Base path for output files, without extension.
            If None, uses self.dest_fname's path without extension.
        output_format (str): Format to save files in. Options:
            - 'csv': Comma-separated values
            - 'excel': Excel spreadsheet (one sheet per group)
            - 'json': JSON format
            - 'parquet': Apache Parquet format
            - 'hdf': HDF5 format
            - 'pickle': Python pickle format
            - 'feather': Feather format
            - 'stata': Stata format
    """
    # Get base path without extension
    if self.dest_out is None:
            raise ValueError("No destination path provided")
    else:
        base_path = str(Path(self.dest_out).with_suffix(''))
    
    # Handle formats that combine all groups in one file
    if self.output_format == 'excel':
        output_path = f"{base_path}.xlsx"
        with pd.ExcelWriter(output_path) as writer:
            for group_name, df in self.dfs.items():
                df.to_excel(writer, sheet_name=group_name, index=False)
                if self.verbose:
                    print(f"Saved {group_name} to sheet in {output_path}")
    
    elif self.output_format == 'hdf':
        output_path = f"{base_path}.h5"
        with pd.HDFStore(output_path) as store:
            for group_name, df in self.dfs.items():
                store[group_name] = df
                if self.verbose:
                    print(f"Saved {group_name} to group in {output_path}")
    
    # Handle formats that create separate files for each group
    else:
        format_extensions = {
            'csv': '.csv',
            'json': '.json',
            'parquet': '.parquet',
            'pickle': '.pkl',
            'feather': '.feather',
            'stata': '.dta'
        }
        
        if self.output_format not in format_extensions:
            raise ValueError(f"Unsupported output format: {self.output_format}. Supported formats: {format_extensions.keys()}")
            
        extension = format_extensions[self.output_format]
        save_methods = {
            'csv': lambda df, path: df.to_csv(path, index=False),
            'json': lambda df, path: df.to_json(path),
            'parquet': lambda df, path: df.to_parquet(path),
            'pickle': lambda df, path: df.to_pickle(path),
            'feather': lambda df, path: df.to_feather(path),
            'stata': lambda df, path: df.to_stata(path)
        }
        
        for group_name, df in self.dfs.items():
            output_path = f"{base_path}_{group_name}{extension}"
            save_methods[self.output_format](df, output_path)
            
            if self.verbose:
                print(f"Saved {group_name} to {output_path}")

# %% ../nbs/api/decoders.ipynb 10
@patch
def decode(self: NetCDFDecoder):
    "  Decode NetCDF to Human readable files."
    # Funvtion to rename the columns. 
    self.process_groups()
    self.save_dataframes()
    
    return self.dfs
    

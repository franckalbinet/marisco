# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/handlers/helcom_refactored.ipynb.

# %% auto 0
__all__ = ['NC_TPL_PATH', 'varnames_lut_updates', 'coi_units_unc', 'coi_grp', 'renaming_rules', 'kw', 'feed', 'load_helcom',
           'rename_cols', 'LowerStripRdnNameCB', 'get_unique_nuclides', 'get_varnames_lut', 'RemapRdnNameCB',
           'ParseTimeCB', 'fix_units', 'NormalizeUncUnitCB', 'LookupBiotaSpeciesCB', 'RenameColumnCB',
           'ReshapeLongToWide', 'EncodeTimeCB', 'SanitizeLonLatCB', 'units_fn', 'encode']

# %% ../../nbs/handlers/helcom_refactored.ipynb 4
import os

import pandas as pd
import numpy as np
from tqdm import tqdm
from functools import partial

from netCDF4 import Dataset
from datetime import datetime, timedelta
from cftime import num2date, date2num
from pathlib import Path
from datetime import datetime
import re

from ..utils import (has_valid_varname, match_worms, 
                           Callback, Transformer)

from ..metadata import (GlobAttrsFeeder, BboxCB, 
                              DepthRangeCB, TimeRangeCB, 
                              ZoteroCB, KeyValuePairCB)

from ..serializers import to_netcdf
from ..configs import get_nc_tpl_path, get_cfgs

NC_TPL_PATH = get_nc_tpl_path()

# %% ../../nbs/handlers/helcom_refactored.ipynb 8
def load_helcom(src_dir, 
                smp_types=['SEA', 'SED', 'BIO']):
    "Load HELCOM data and return them as individual dataframe by sample type"
    dfs = {}
    lut_smp_type = {'SEA': 'seawater', 'SED': 'sediment', 'BIO':'biota'}
    for smp_type in smp_types:
        fname_meas = smp_type + '02.csv'
        fname_smp = smp_type + '01.csv'
        df = pd.merge(pd.read_csv(Path(src_dir)/fname_meas), # measurements
                      pd.read_csv(Path(src_dir)/fname_smp), # sample
                      on='KEY', how='left')
        dfs[lut_smp_type[smp_type]] = df
    return dfs

def rename_cols(cols):
    "Flatten multiindex columns"
    new_cols = []
    for outer, inner in cols:
        if not inner:
            new_cols.append(outer)
        else:
            if outer == 'unc':
                new_cols.append(inner + '_' + outer)
            if outer == 'value':
                new_cols.append(inner)
    return new_cols

# %% ../../nbs/handlers/helcom_refactored.ipynb 17
class LowerStripRdnNameCB(Callback):
    "Convert nuclide names to lowercase & strip any trailing space(s)"
    def __call__(self, tfm):
        for k in tfm.dfs.keys():
            tfm.dfs[k]['NUCLIDE'] = tfm.dfs[k]['NUCLIDE'].apply(lambda x: x.lower().strip())

# %% ../../nbs/handlers/helcom_refactored.ipynb 20
def get_unique_nuclides(dfs):
    "Get list of unique radionuclide types measured across samples"
    nuclides = []
    for k in dfs.keys():
        nuclides += dfs[k]['NUCLIDE'].unique().tolist()
    return nuclides

# %% ../../nbs/handlers/helcom_refactored.ipynb 25
varnames_lut_updates = {
    'k-40': 'k40',
    'cm243244': 'cm243_244_tot',
    'cs134137': 'cs134_137_tot',
    'pu239240': 'pu239_240_tot',
    'pu238240': 'pu238_240_tot'}

# %% ../../nbs/handlers/helcom_refactored.ipynb 26
def get_varnames_lut(dfs, lut=varnames_lut_updates):
    lut = {n: n for n in set(get_unique_nuclides(dfs))}
    lut.update(varnames_lut_updates)
    return lut

# %% ../../nbs/handlers/helcom_refactored.ipynb 28
class RemapRdnNameCB(Callback):
    "Remap to MARIS radionuclide names"
    def __init__(self, 
                 fn_lut=partial(get_varnames_lut, lut=varnames_lut_updates)): 
        fc.store_attr()        
    def __call__(self, tfm):
        lut = self.fn_lut(tfm.dfs)
        for k in tfm.dfs.keys():
            tfm.dfs[k]['NUCLIDE'].replace(lut, inplace=True)            

# %% ../../nbs/handlers/helcom_refactored.ipynb 32
class ParseTimeCB(Callback):
    def __call__(self, tfm):
        #format_time = lambda x: date2num(x, units=get_cfgs('units')['time'])
        for k in tfm.dfs.keys():
            # Parse
            tfm.dfs[k]['time'] = pd.to_datetime(tfm.dfs[k].DATE, infer_datetime_format=True)

# %% ../../nbs/handlers/helcom_refactored.ipynb 35
# Make measurement and uncertainty units consistent
def fix_units(df, meas_col, unc_col):
    return df.apply(lambda row: row[unc_col] * row[meas_col]/100, axis=1)    

# %% ../../nbs/handlers/helcom_refactored.ipynb 36
# Columns of interest
coi_units_unc = [('seawater', 'VALUE_Bq/m³', 'ERROR%_m³'), 
                 ('biota', 'VALUE_Bq/kg', 'ERROR%'),
                 ('sediment', 'VALUE_Bq/kg', 'ERROR%_kg')]

# %% ../../nbs/handlers/helcom_refactored.ipynb 37
class NormalizeUncUnitCB(Callback):
    "Convert uncertainty from % to activity unit"
    def __init__(self, coi=coi_units_unc): fc.store_attr()
    
    def __call__(self, tfm):
        for grp, val, unc in self.coi: 
            tfm.dfs[grp][unc] = self.fix_units(tfm.dfs[grp], val, unc)
            
    def fix_units(self, df, meas_col, unc_col):
        return df.apply(lambda row: row[unc_col] * row[meas_col]/100, axis=1)    

# %% ../../nbs/handlers/helcom_refactored.ipynb 43
class LookupBiotaSpeciesCB(Callback):
    'Match "RUBIN" species with WorMS db taxon name (AphiaID)'
    def __init__(self, lut): fc.store_attr()
    
    def __call__(self, tfm):
        tfm.dfs['biota']['species_id'] = tfm.dfs['biota']['RUBIN'].apply(lambda x: self.lut[x.strip()])

# %% ../../nbs/handlers/helcom_refactored.ipynb 48
# Define columns of interest by sample type
coi_grp = {'seawater': ['NUCLIDE', 'VALUE_Bq/m³', 'ERROR%_m³', 'time',
                        'TDEPTH', 'LATITUDE (dddddd)', 'LONGITUDE (dddddd)'],
           'sediment': ['NUCLIDE', 'VALUE_Bq/kg', 'ERROR%_kg', 'time',
                        'TDEPTH', 'LATITUDE (dddddd)', 'LONGITUDE (dddddd)', 
                        'SEDI'],
            'biota': ['NUCLIDE', 'VALUE_Bq/kg', 'ERROR%', 'time',
                        'SDEPTH', 'LATITUDE ddmmmm', 'LONGITUDE ddmmmm',
                        'species_id', 'TISSUE']}

# %% ../../nbs/handlers/helcom_refactored.ipynb 49
# Define column names renaming rules
renaming_rules = {
    'NUCLIDE': 'nuclide',
    'VALUE_Bq/m³': 'value',
    'VALUE_Bq/kg': 'value',
    'ERROR%_m³': 'unc',
    'ERROR%_kg': 'unc',
    'ERROR%': 'unc',
    'TDEPTH': 'depth',
    'SDEPTH': 'depth',
    'LATITUDE (dddddd)':'lat',
    'LATITUDE ddmmmm': 'lat',
    'LONGITUDE (dddddd)':'lon',
    'LONGITUDE ddmmmm': 'lon',
    # group specific
    'TISSUE': 'body_part',
    'SEDI': 'sed_type'
}

# %% ../../nbs/handlers/helcom_refactored.ipynb 50
class RenameColumnCB(Callback):
    def __init__(self, 
                 coi=coi_grp, 
                 renaming_rules=renaming_rules): 
        fc.store_attr()
    
    def __call__(self, tfm):
        for k in tfm.dfs.keys():
            # Select cols of interest
            tfm.dfs[k] = tfm.dfs[k].loc[:, self.coi[k]]
            
            
            # Rename cols
            tfm.dfs[k].rename(columns=self.renaming_rules, inplace=True)

# %% ../../nbs/handlers/helcom_refactored.ipynb 53
class ReshapeLongToWide(Callback):
    def __init__(self): fc.store_attr()
    
    def __call__(self, tfm):
        for k in tfm.dfs.keys():
            cols = ['nuclide']
            vals = ['value', 'unc']
            idx = list(set(tfm.dfs[k].columns) - set(cols + vals)) # All others

            tfm.dfs[k] = tfm.dfs[k].pivot_table(index=idx, 
                                                columns=cols, 
                                                values=vals).reset_index()

            # Flatten cols name
            tfm.dfs[k].columns = rename_cols(tfm.dfs[k].columns)

            # Set index
            tfm.dfs[k].index.name = 'sample'

# %% ../../nbs/handlers/helcom_refactored.ipynb 56
class EncodeTimeCB(Callback):
    "Encode time as `int` representing seconds since xxx"
    def __call__(self, tfm):
        format_time = lambda x: date2num(x, units=get_cfgs('units')['time'])
        for k in tfm.dfs.keys():    
            tfm.dfs[k]['time'] = tfm.dfs[k]['time'].apply(format_time)
  

# %% ../../nbs/handlers/helcom_refactored.ipynb 59
class SanitizeLonLatCB(Callback):
    "Drop row when both longitude & latitude equal 0"
    def __call__(self, tfm):
        tfm.dfs = {grp: (df[(df.lon != 0) & (df.lat != 0)]) 
                   for grp, df in tfm.dfs.items()}

# %% ../../nbs/handlers/helcom_refactored.ipynb 64
kw = ['oceanography', 'Earth Science > Oceans > Ocean Chemistry> Radionuclides',
      'Earth Science > Human Dimensions > Environmental Impacts > Nuclear Radiation Exposure',
      'Earth Science > Oceans > Ocean Chemistry > Ocean Tracers, Earth Science > Oceans > Marine Sediments',
      'Earth Science > Oceans > Ocean Chemistry, Earth Science > Oceans > Sea Ice > Isotopes',
      'Earth Science > Oceans > Water Quality > Ocean Contaminants',
      'Earth Science > Biological Classification > Animals/Vertebrates > Fish',
      'Earth Science > Biosphere > Ecosystems > Marine Ecosystems',
      'Earth Science > Biological Classification > Animals/Invertebrates > Mollusks',
      'Earth Science > Biological Classification > Animals/Invertebrates > Arthropods > Crustaceans',
      'Earth Science > Biological Classification > Plants > Macroalgae (Seaweeds)']

# %% ../../nbs/handlers/helcom_refactored.ipynb 65
feed = GlobAttrsFeeder(dfs_tfm, cbs=[BboxCB(), 
                                     DepthRangeCB(),
                                     TimeRangeCB(),
                                     ZoteroCB('26VMZZ2Q'),
                                     KeyValuePairCB('keywords', ', '.join(kw)),
                                     KeyValuePairCB('publisher_postprocess_logs', ', '.join(tfm.logs))
                                     ])

# %% ../../nbs/handlers/helcom_refactored.ipynb 68
def units_fn(grp_name):
    lut = {'seawater': 'Bq/m³', 
           'sediment': 'Bq/kg', 
           'biota': 'Bq/kg'}
    return lut[grp_name]

# %% ../../nbs/handlers/helcom_refactored.ipynb 70
def encode(fname_in, fname_out):
    dfs = load_helcom(fname_in)
    tfm = Transformer(dfs, cbs=[LowerStripRdnNameCB(),
                                RemapRdnNameCB(),
                                ParseTimeCB(),
                                NormalizeUncUnitCB(),
                                # LookupBiotaSpeciesCB(species_lut),
                                RenameColumnCB(),
                                ReshapeLongToWide(),
                                EncodeTimeCB(),
                                SanitizeLonLatCB()])

    to_netcdf(tfm(), NC_TPL_PATH, fname_out, feed(), units_fn)

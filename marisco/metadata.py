# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/metadata.ipynb.

# %% auto 0
__all__ = ['Metadata', 'ZoteroItem']

# %% ../nbs/api/metadata.ipynb 2
import pandas as pd
from fastcore.xtras import load_pickle

from .utils import read_toml, get_bbox
from .configs import BASE_PATH, get_cfgs

from cftime import num2date
from pyzotero import zotero
import json

# %% ../nbs/api/metadata.ipynb 3
class Metadata:
    def __init__(self, dfs):
        self.dfs = dfs
        self.attrs = read_toml(BASE_PATH / 'cdl.toml')['global_attrs']

    def __repr__(self):
        return json.dumps(self.attrs, indent=4) 

    def fill_geo(self):
        bbox = get_bbox(pd.concat(self.dfs))
        lon_min, lon_max, lat_min, lat_max = [str(bound) for bound in bbox.bounds]
        self.attrs['geospatial_lat_min'] = lat_min
        self.attrs['geospatial_lat_max'] = lat_max
        self.attrs['geospatial_lon_min'] = lon_min
        self.attrs['geospatial_lon_max'] = lon_max
        self.attrs['geospatial_bounds'] = bbox.wkt
        return self.attrs
    
    def fill_z(self):
        max_depth = pd.concat(self.dfs).depth.max()
        min_depth = pd.concat(self.dfs).depth.min()
        self.attrs['geospatial_vertical_max'] =  '0' if min_depth == 0 else str(-min_depth)
        self.attrs['geospatial_vertical_min'] = str(-max_depth)
        return self.attrs
    
    def fill_time(self):
        time = pd.concat(self.dfs)['time']
        start, end = [num2date(t,units=get_cfgs('units')['time']).isoformat() for t in (time.min(), time.max())]
        self.attrs['time_coverage_start'] = start
        self.attrs['time_coverage_end'] = end
        return self.attrs
    
    def fill_zotero(self, zoteroItem):
        for attr in ['title', 'summary', 'creator_name']:
            self.attrs[attr] = getattr(zoteroItem, attr)()
        return self.attrs
    
    def fill(self, zoteroItem):
        self.fill_geo()
        self.fill_z()
        self.fill_time()
        self.fill_zotero(zoteroItem)
        return self.attrs

# %% ../nbs/api/metadata.ipynb 4
class ZoteroItem:
    def __init__(self, item_id, cfgs):
        self.cfgs = cfgs
        self.item = self.getItem(item_id)
        
    def getItem(self, item_id):
        zot = zotero.Zotero(self.cfgs['lib_id'], 'group', self.cfgs['api_key'])
        return zot.item(item_id)
    
    def title(self):
        return self.item['data']['title']
    
    def summary(self):
        return self.item['data']['abstractNote']
    
    def creator_name(self):
        creators = [f'{c["creatorType"]}: {c["name"]}' for c in self.item['data']['creators']]
        return '; '.join(creators)
            
    def __repr__(self):
        return json.dumps(self.item, indent=4) 
